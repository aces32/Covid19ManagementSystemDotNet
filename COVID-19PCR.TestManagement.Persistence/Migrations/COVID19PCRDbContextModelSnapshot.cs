// <auto-generated />
using System;
using COVID_19PCR.TestManagement.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace COVID_19PCR.TestManagement.Persistence.Migrations
{
    [DbContext(typeof(COVID19PCRDbContext))]
    partial class COVID19PCRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.AdminBookingAllocation", b =>
                {
                    b.Property<int>("AdminBookingAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("BookingDates")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("SpaceAllocated")
                        .HasColumnType("int");

                    b.HasKey("AdminBookingAllocationId");

                    b.HasIndex("LocationID");

                    b.ToTable("AdminBookingAllocations");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminBookingAllocationId")
                        .HasColumnType("int");

                    b.Property<bool>("IndividualBookingStatus")
                        .HasColumnType("bit");

                    b.Property<string>("IndividualEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndividualId");

                    b.HasIndex("AdminBookingAllocationId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.IndividualLab", b =>
                {
                    b.Property<int>("IndividualLabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("TestCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("TestOutCome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndividualLabId");

                    b.HasIndex("IndividualId")
                        .IsUnique();

                    b.ToTable("IndividualLabs");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LocationName = "Lagos, Nigeria"
                        },
                        new
                        {
                            LocationID = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LocationName = "Ogun, Nigeria"
                        },
                        new
                        {
                            LocationID = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LocationName = "Texas, USA"
                        },
                        new
                        {
                            LocationID = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LocationName = "San Fransisco, USA"
                        });
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.AdminBookingAllocation", b =>
                {
                    b.HasOne("COVID_19PCR.TestManagement.Domain.Entites.Location", "Location")
                        .WithMany("AdminBookingAllocations")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.Individual", b =>
                {
                    b.HasOne("COVID_19PCR.TestManagement.Domain.Entites.AdminBookingAllocation", "AdminBookingAllocation")
                        .WithMany("Individuals")
                        .HasForeignKey("AdminBookingAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminBookingAllocation");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.IndividualLab", b =>
                {
                    b.HasOne("COVID_19PCR.TestManagement.Domain.Entites.Individual", "Individual")
                        .WithOne("IndividualLab")
                        .HasForeignKey("COVID_19PCR.TestManagement.Domain.Entites.IndividualLab", "IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.AdminBookingAllocation", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.Individual", b =>
                {
                    b.Navigation("IndividualLab");
                });

            modelBuilder.Entity("COVID_19PCR.TestManagement.Domain.Entites.Location", b =>
                {
                    b.Navigation("AdminBookingAllocations");
                });
#pragma warning restore 612, 618
        }
    }
}
